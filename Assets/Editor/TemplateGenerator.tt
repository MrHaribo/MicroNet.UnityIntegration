<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System.Collections.Generic;
using UnityEngine;

public class <#= templateName #><# if (parentName != null) {#> : <#= parentName #> <#}#>

{

<#for (int i = 0; i < constantNames.Length; i++) {#>
	public const <#= constantTypes[i] #> <#= constantNames[i] #> = <#= constantValues[i] #>;
<#}#>


<#if (ctorArgs.Length > 0 || ctorArgString.Length > 0) { #>
	public <#= templateName #> (<#= ctorArgString #>)
	<#if (superCtorArgString.Length > 0) {#>
		: base(<#= superCtorArgString #>)
	<#}#>
	{
	<#for (int i = 0; i < ctorArgs.Length; i++) {#>
		this.<#=ctorArgs[i]#> = <#=ctorArgs[i]#>;
	<#}#>
	}
<#}#>

<#for (int i = 0; i < fieldNames.Length; i++) {#>
	private <#= fieldTypes[i] #> <#= firstLower(fieldNames[i]) #>;
	public <#= fieldTypes[i] #> <#= firstUpper(fieldNames[i]) #>
	{
		get { return <#=fieldNames[i]#>; }
		set { <#=fieldNames[i]#> = value; }
	}
<#}#>

<#foreach (KeyValuePair<string, KeyValuePair<string, string[]>> script in scripts) {#>
	public object <#= firstUpper(script.Key) #>
	{
		get 
		{
			return ScriptExecutor.invoke("<#=script.Value.Key#>"
				<# for (int i = 0; i < script.Value.Value.Length; i++) {#>
					, <#= firstUpper(script.Value.Value[i]) #>
				<#}#>
			);
		}
	}
<#}#>

}



<#+
private string firstUpper(string input) 
{
	return input.First().ToString().ToUpper() + input.Substring(1);
}
private string firstLower(string input) 
{
	return input.First().ToString().ToLower() + input.Substring(1);
}
#>
